{"version":3,"sources":["Header.js","SearchForm.js","Book.js","BookShelf.js","App.js","serviceWorker.js","index.js"],"names":["withStyles","heading","flexGrow","fontSize","bookIcon","marginRight","verticalAlign","props","classes","react_default","a","createElement","AppBar_default","position","Toolbar_default","Typography_default","variant","component","color","align","className","Icon_default","paper","margin","padding","searchForm","display","justifyContent","alignItems","flexFlow","textField","searchQuery","handleInputChange","handleFormSubmit","Paper_default","elevation","onSubmit","TextField_default","id","placeholder","value","onChange","fullWidth","InputLabelProps","shrink","Button_default","type","style","textAlign","button","Book","thumbnail","title","authors","publisher","pageCount","previewLink","author","map","person","Card_default","card","CardMedia_default","image","cover","CardContent_default","content","href","target","defaultProps","flex","maxWidth","width","height","backgroundSize","bookList","noBooksMessage","searchStatus","bookItems","bookSearchResults","book","_book$volumeInfo","volumeInfo","smallThumbnail","imageLinks","src_Book","key","length","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","name","event","setState","defineProperty","handleSearch","state","preventDefault","trim","fetch","concat","then","response","ok","Error","json","responseJSON","items","catch","bookSearchStatus","_this$state","Fragment","src_Header","src_SearchForm","src_BookShelf","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9c285691.chunk.js","sourcesContent":["import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Icon from '@material-ui/core/Icon';\nimport PropTypes from 'prop-types';\n\nconst styles = {\n  heading: {\n    flexGrow: 1,\n    fontSize: '30px',\n  },\n  bookIcon: {\n    fontSize: '35px',\n    marginRight: '10px',\n    verticalAlign: 'bottom',\n  },\n};\n\nconst Header = props => {\n  const { classes } = props;\n  return (\n    <AppBar position=\"static\">\n      <Toolbar>\n        <Typography variant=\"h3\" component=\"h1\" color=\"inherit\" align=\"center\" className={classes.heading}>\n          <Icon className={classes.bookIcon}>library_books</Icon>\n          Book Finder\n        </Typography>\n      </Toolbar>\n    </AppBar>\n  );\n};\nHeader.propTypes = {\n  classes: PropTypes.shape({ heading: PropTypes.string.isRequired, bookIcon: PropTypes.string.isRequired }).isRequired,\n};\nexport default withStyles(styles)(Header);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\n\nconst styles = {\n  paper: {\n    margin: '12px',\n    padding: '10px',\n  },\n  searchForm: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    flexFlow: 'column wrap',\n    padding: '0 10px',\n  },\n  textField: {\n    margin: '10px 0',\n  },\n};\n\nconst SearchForm = props => {\n  const { classes, searchQuery, handleInputChange, handleFormSubmit } = props;\n  return (\n    <Paper elevation={2} className={classes.paper}>\n      <form onSubmit={handleFormSubmit} className={classes.searchForm}>\n        <TextField\n          className={classes.textField}\n          id=\"outlined-full-width\"\n          placeholder=\"Search By Book Title or Author\"\n          value={searchQuery}\n          onChange={handleInputChange('searchQuery')}\n          fullWidth\n          variant=\"outlined\"\n          InputLabelProps={{\n            shrink: true,\n          }}\n        />\n        <Button\n          variant=\"contained\"\n          color=\"default\"\n          type=\"submit\"\n          style={{ textAlign: 'center' }}\n          className={classes.button}\n        >\n          Search\n        </Button>\n      </form>\n    </Paper>\n  );\n};\n\nSearchForm.propTypes = {\n  classes: PropTypes.shape({\n    searchForm: PropTypes.string.isRequired,\n    textField: PropTypes.string.isRequired,\n  }).isRequired,\n  searchQuery: PropTypes.string.isRequired,\n  handleFormSubmit: PropTypes.func.isRequired,\n  handleInputChange: PropTypes.func.isRequired,\n};\nexport default withStyles(styles)(SearchForm);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\n\nconst styles = {\n  card: {\n    flex: '1 1 320px',\n    display: 'flex',\n    margin: '45px 15px',\n    padding: 10,\n    maxWidth: 355,\n  },\n  cover: {\n    flex: 1,\n    maxWidth: '100%',\n    width: 128,\n    height: 171,\n    backgroundSize: 'auto',\n  },\n  content: {\n    flex: 2,\n  },\n};\n// img src,\nconst Book = props => {\n  const { classes, thumbnail, title, authors, publisher, pageCount, previewLink } = props;\n  const author = authors.map(person => person);\n  return (\n    <Card className={classes.card}>\n      <CardMedia image={thumbnail} title=\"book cover\" className={classes.cover} />\n      <CardContent className={classes.content}>\n        <h4>{title}</h4>\n        <p>\n          <span>By - </span>\n          <span>{author}</span>\n        </p>\n        <p>\n          <span>Publisher - </span>\n          <span>{publisher}</span>\n        </p>\n        <p>\n          <span>{pageCount}</span>\n          <span> pages</span>\n        </p>\n        <Button variant=\"contained\" href={previewLink} target=\"_blank\" className={classes.button} color=\"primary\">\n          See this Book\n        </Button>\n      </CardContent>\n    </Card>\n  );\n};\nBook.propTypes = {\n  classes: PropTypes.objectOf(PropTypes.string.isRequired).isRequired,\n  authors: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\n  publisher: PropTypes.string,\n  pageCount: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  previewLink: PropTypes.string.isRequired,\n  thumbnail: PropTypes.string.isRequired,\n};\nBook.defaultProps = {\n  publisher: '',\n};\nexport default withStyles(styles)(Book);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core';\nimport Book from './Book';\n\nconst styles = {\n  bookList: {\n    display: 'flex',\n    flexFlow: 'row wrap',\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 16,\n  },\n  noBooksMessage: {\n    fontSize: '24px',\n    textAlign: 'center',\n  },\n};\n\nconst BookShelf = props => {\n  const { classes, searchStatus, bookItems } = props;\n  const bookSearchResults = bookItems.map(book => {\n    const { id } = book;\n    const { title, authors, publisher, pageCount, previewLink } = book.volumeInfo;\n    const { smallThumbnail } = book.volumeInfo.imageLinks;\n    return (\n      <Book\n        title={title}\n        authors={authors}\n        publisher={publisher}\n        pageCount={pageCount}\n        previewLink={previewLink}\n        thumbnail={smallThumbnail}\n        key={id}\n      />\n    );\n  });\n  return <div className={classes.bookList}>{bookItems.length ? bookSearchResults : <p>{searchStatus}</p>}</div>;\n};\nBookShelf.propTypes = {\n  classes: PropTypes.objectOf(PropTypes.string).isRequired,\n  searchStatus: PropTypes.string.isRequired,\n  bookItems: PropTypes.arrayOf(PropTypes.any).isRequired,\n};\nexport default withStyles(styles)(BookShelf);\n","import React from 'react';\nimport Header from './Header';\nimport SearchForm from './SearchForm';\nimport BookShelf from './BookShelf';\n\n// Google Books API key\nconst key = 'AIzaSyBxjEYXaaizTFZI9aP1ZRXzdP7k4j5tFhw';\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchQuery: '',\n      bookItems: [], // array of 10 book items\n      bookSearchStatus: 'Nothing Here Yet - Try Searching For A Book!',\n    };\n  }\n\n  // handle text input change in search book form\n  handleChange = name => event => {\n    this.setState({\n      [name]: event.target.value,\n    });\n  };\n\n  // handle search book form submit\n  handleSearch = event => {\n    const { searchQuery } = this.state;\n    event.preventDefault();\n    if (searchQuery.trim() === '') {\n      return null;\n    }\n    fetch(`https://www.googleapis.com/books/v1/volumes?q=${searchQuery}&maxResults=15&key=${key}`)\n      .then(response => {\n        if (!response.ok) {\n          throw Error('Bad response for flag request!'); // This will implicitly reject\n        }\n        return response.json();\n      })\n      .then(responseJSON => {\n        this.setState({\n          bookItems: responseJSON.items,\n          searchQuery: '',\n        });\n      })\n      .catch(() => this.setState({ searchQuery: 'Something went wrong, Try again' }));\n    return true;\n  };\n\n  render() {\n    const { searchQuery, bookItems, bookSearchStatus } = this.state;\n    return (\n      <React.Fragment>\n        <Header />\n        <SearchForm\n          searchQuery={searchQuery}\n          handleInputChange={this.handleChange}\n          handleFormSubmit={this.handleSearch}\n        />\n        <BookShelf searchStatus={bookSearchStatus} bookItems={bookItems} />\n      </React.Fragment>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}